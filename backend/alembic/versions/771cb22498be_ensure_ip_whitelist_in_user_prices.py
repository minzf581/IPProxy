"""ensure_ip_whitelist_in_user_prices

Revision ID: 771cb22498be
Revises: 
Create Date: 2025-02-25 20:14:30.307944

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '771cb22498be'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('product_inventory',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('product_no', sa.String(length=50), nullable=False, comment='产品编号'),
    sa.Column('product_name', sa.String(length=100), nullable=False, comment='商品名称'),
    sa.Column('proxy_type', sa.SmallInteger(), nullable=False, comment='代理类型'),
    sa.Column('use_type', sa.String(length=20), nullable=False, comment='使用类型(1=账密,2=白名单,3=uuid)'),
    sa.Column('protocol', sa.String(length=20), nullable=False, comment='协议(1=socks5,2=http,3=https,4=ssh)'),
    sa.Column('use_limit', sa.SmallInteger(), nullable=False, comment='使用限制(1=出口ip国外,2=出口ip国内,3=无限制)'),
    sa.Column('sell_limit', sa.SmallInteger(), nullable=False, comment='销售限制(1=大陆可售,2=海外可售,3=无限制)'),
    sa.Column('area_code', sa.String(length=20), nullable=True, comment='区域代码'),
    sa.Column('country_code', sa.String(length=3), nullable=False, comment='国家代码'),
    sa.Column('state_code', sa.String(length=6), nullable=False, comment='州省代码'),
    sa.Column('city_code', sa.String(length=9), nullable=False, comment='城市代码'),
    sa.Column('detail', sa.Text(), nullable=True, comment='商品描述'),
    sa.Column('cost_price', sa.DECIMAL(precision=10, scale=4), nullable=False, comment='成本价格'),
    sa.Column('global_price', sa.DECIMAL(precision=10, scale=4), nullable=True, comment='全局销售价格'),
    sa.Column('min_agent_price', sa.DECIMAL(precision=10, scale=4), nullable=True, comment='最低代理商价格'),
    sa.Column('inventory', sa.Integer(), nullable=False, comment='库存'),
    sa.Column('ip_type', sa.SmallInteger(), nullable=True, comment='ip类型(1=ipv4,2=ipv6,3=随机)'),
    sa.Column('isp_type', sa.SmallInteger(), nullable=True, comment='isp类型(1=单isp,2=双isp,0=未知)'),
    sa.Column('net_type', sa.SmallInteger(), nullable=True, comment='网络类型(1=原生,2=广播,0=未知)'),
    sa.Column('duration', sa.Integer(), nullable=False, comment='时长'),
    sa.Column('unit', sa.SmallInteger(), nullable=False, comment='单位(1=天,2=周,3=月,4=年)'),
    sa.Column('band_width', sa.Integer(), nullable=True, comment='带宽(MB)'),
    sa.Column('band_width_price', sa.DECIMAL(precision=10, scale=4), nullable=True, comment='额外带宽价格'),
    sa.Column('max_band_width', sa.Integer(), nullable=True, comment='最大带宽'),
    sa.Column('flow', sa.Integer(), nullable=True, comment='流量包大小(MB)'),
    sa.Column('cpu', sa.Integer(), nullable=True, comment='CPU数量'),
    sa.Column('memory', sa.Float(), nullable=True, comment='内存容量'),
    sa.Column('enable', sa.SmallInteger(), nullable=True, comment='是否可购买'),
    sa.Column('supplier_code', sa.String(length=20), nullable=True, comment='供应商代码'),
    sa.Column('ip_count', sa.Integer(), nullable=True, comment='IP数量'),
    sa.Column('ip_duration', sa.Integer(), nullable=True, comment='IP时长(分钟)'),
    sa.Column('assign_ip', sa.SmallInteger(), nullable=True, comment='是否支持指定IP(-1=否,1=是)'),
    sa.Column('cidr_status', sa.SmallInteger(), nullable=True, comment='是否支持网段(-1=否,1=是)'),
    sa.Column('static_type', sa.String(length=20), nullable=True, comment='静态代理类型'),
    sa.Column('last_sync_time', sa.TIMESTAMP(), nullable=True, comment='最后同步时间'),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('ip_start', sa.String(length=15), nullable=True, comment='IP段起始地址'),
    sa.Column('ip_end', sa.String(length=15), nullable=True, comment='IP段结束地址'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('product_no')
    )
    op.create_index('ix_product_inventory_area_code', 'product_inventory', ['area_code'], unique=False)
    op.create_index('ix_product_inventory_city_code', 'product_inventory', ['city_code'], unique=False)
    op.create_index('ix_product_inventory_country_code', 'product_inventory', ['country_code'], unique=False)
    op.create_index('ix_product_inventory_product_no', 'product_inventory', ['product_no'], unique=False)
    op.create_index('ix_product_inventory_proxy_type', 'product_inventory', ['proxy_type'], unique=False)
    op.create_index('ix_product_inventory_static_type', 'product_inventory', ['static_type'], unique=False)
    op.create_index('ix_product_inventory_supplier_code', 'product_inventory', ['supplier_code'], unique=False)
    op.create_table('proxy_info',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('balance', sa.Float(), nullable=True),
    sa.Column('total_recharge', sa.Float(), nullable=True),
    sa.Column('total_consumption', sa.Float(), nullable=True),
    sa.Column('month_recharge', sa.Float(), nullable=True),
    sa.Column('month_consumption', sa.Float(), nullable=True),
    sa.Column('last_month_consumption', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('resource_usage',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('resource_type', sa.String(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('total', sa.Integer(), nullable=True),
    sa.Column('used', sa.Integer(), nullable=True),
    sa.Column('today', sa.Integer(), nullable=True),
    sa.Column('last_month', sa.Integer(), nullable=True),
    sa.Column('available', sa.Integer(), nullable=True),
    sa.Column('percentage', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_resource_usage_id'), 'resource_usage', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('app_username', sa.String(length=50), nullable=True),
    sa.Column('platform_account', sa.String(length=50), nullable=True),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('status', sa.Integer(), server_default='1', nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.Column('is_agent', sa.Boolean(), nullable=True),
    sa.Column('balance', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('remark', sa.Text(), nullable=True),
    sa.Column('last_login_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('agent_id', sa.Integer(), nullable=True),
    sa.Column('ipipv_username', sa.String(length=50), nullable=True),
    sa.Column('ipipv_password', sa.String(length=255), nullable=True),
    sa.Column('total_recharge', sa.Numeric(precision=10, scale=2), server_default='0', nullable=False),
    sa.Column('total_consumption', sa.Numeric(precision=10, scale=2), server_default='0', nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('ipipv_username'),
    sa.UniqueConstraint('platform_account'),
    sa.UniqueConstraint('username', 'agent_id', name='uq_username_agent_id')
    )
    op.create_index(op.f('ix_users_app_username'), 'users', ['app_username'], unique=True)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=False)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=False)
    op.create_table('agent_prices',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('agent_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('price', sa.DECIMAL(precision=10, scale=4), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.CheckConstraint('price >= 0', name='chk_agent_price_positive'),
    sa.ForeignKeyConstraint(['agent_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product_inventory.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('agent_id', 'product_id', name='uix_agent_product')
    )
    op.create_index(op.f('ix_agent_prices_agent_id'), 'agent_prices', ['agent_id'], unique=False)
    op.create_index(op.f('ix_agent_prices_product_id'), 'agent_prices', ['product_id'], unique=False)
    op.create_table('agent_statistics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('agent_id', sa.Integer(), nullable=False),
    sa.Column('total_users', sa.Integer(), nullable=False),
    sa.Column('active_users', sa.Integer(), nullable=False),
    sa.Column('total_orders', sa.Integer(), nullable=False),
    sa.Column('active_orders', sa.Integer(), nullable=False),
    sa.Column('total_consumption', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('monthly_consumption', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('dynamic_resource_count', sa.Integer(), nullable=False),
    sa.Column('static_resource_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_agent_statistics_id'), 'agent_statistics', ['id'], unique=False)
    op.create_table('dynamic_orders',
    sa.Column('id', sa.String(length=50), nullable=False),
    sa.Column('order_no', sa.String(length=50), nullable=True),
    sa.Column('app_order_no', sa.String(length=50), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('agent_id', sa.Integer(), nullable=True),
    sa.Column('pool_type', sa.String(length=50), nullable=True),
    sa.Column('traffic', sa.Integer(), nullable=True),
    sa.Column('unit_price', sa.Float(), nullable=True),
    sa.Column('total_amount', sa.Float(), nullable=True),
    sa.Column('proxy_type', sa.String(length=20), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('remark', sa.String(length=255), nullable=True),
    sa.Column('proxy_info', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_dynamic_orders_app_order_no'), 'dynamic_orders', ['app_order_no'], unique=True)
    op.create_index(op.f('ix_dynamic_orders_id'), 'dynamic_orders', ['id'], unique=False)
    op.create_index(op.f('ix_dynamic_orders_order_no'), 'dynamic_orders', ['order_no'], unique=True)
    op.create_table('flow_usage',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('instance_no', sa.String(length=32), nullable=False),
    sa.Column('daily_usage', sa.Float(), nullable=True, comment='日使用量(GB)'),
    sa.Column('monthly_usage', sa.Float(), nullable=True, comment='月度使用量(GB)'),
    sa.Column('total_usage', sa.Float(), nullable=True, comment='总使用量(GB)'),
    sa.Column('remark', sa.Text(), nullable=True, comment='备注'),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_flow_usage_instance_no'), 'flow_usage', ['instance_no'], unique=False)
    op.create_index(op.f('ix_flow_usage_user_id'), 'flow_usage', ['user_id'], unique=False)
    op.create_table('resource_usage_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('resource_type_id', sa.Integer(), nullable=True),
    sa.Column('usage_amount', sa.Float(), nullable=True),
    sa.Column('usage_type', sa.String(length=50), nullable=True),
    sa.Column('remark', sa.String(length=255), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['resource_type_id'], ['product_inventory.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('resource_usage_statistics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('product_no', sa.String(length=50), nullable=False),
    sa.Column('resource_type', sa.String(length=20), nullable=False),
    sa.Column('total_amount', sa.Float(), nullable=True),
    sa.Column('used_amount', sa.Float(), nullable=True),
    sa.Column('today_usage', sa.Float(), nullable=True),
    sa.Column('month_usage', sa.Float(), nullable=True),
    sa.Column('last_month_usage', sa.Float(), nullable=True),
    sa.Column('last_sync_time', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['product_no'], ['product_inventory.product_no'], name='fk_resource_usage_product_no'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('static_orders',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('order_no', sa.String(length=32), nullable=False, comment='我方订单号'),
    sa.Column('app_order_no', sa.String(length=32), nullable=False, comment='IPIPV平台订单号'),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('agent_id', sa.Integer(), nullable=False),
    sa.Column('product_no', sa.String(length=50), nullable=False, comment='产品编号'),
    sa.Column('proxy_type', sa.Integer(), nullable=False, comment='代理类型'),
    sa.Column('region_code', sa.String(length=20), nullable=True, comment='区域代码'),
    sa.Column('country_code', sa.String(length=3), nullable=True, comment='国家代码'),
    sa.Column('city_code', sa.String(length=9), nullable=True, comment='城市代码'),
    sa.Column('static_type', sa.String(length=20), nullable=True, comment='静态代理类型'),
    sa.Column('ip_count', sa.Integer(), nullable=False, comment='IP数量'),
    sa.Column('duration', sa.Integer(), nullable=False, comment='购买时长'),
    sa.Column('unit', sa.Integer(), nullable=False, comment='时长单位(1=天,2=周,3=月)'),
    sa.Column('amount', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='订单金额'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='订单状态'),
    sa.Column('callback_count', sa.Integer(), nullable=True, comment='回调次数'),
    sa.Column('last_callback_time', sa.TIMESTAMP(), nullable=True, comment='最后回调时间'),
    sa.Column('remark', sa.Text(), nullable=True, comment='备注'),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_static_orders_agent_id'), 'static_orders', ['agent_id'], unique=False)
    op.create_index(op.f('ix_static_orders_app_order_no'), 'static_orders', ['app_order_no'], unique=False)
    op.create_index(op.f('ix_static_orders_city_code'), 'static_orders', ['city_code'], unique=False)
    op.create_index(op.f('ix_static_orders_country_code'), 'static_orders', ['country_code'], unique=False)
    op.create_index(op.f('ix_static_orders_order_no'), 'static_orders', ['order_no'], unique=True)
    op.create_index(op.f('ix_static_orders_product_no'), 'static_orders', ['product_no'], unique=False)
    op.create_index(op.f('ix_static_orders_proxy_type'), 'static_orders', ['proxy_type'], unique=False)
    op.create_index(op.f('ix_static_orders_region_code'), 'static_orders', ['region_code'], unique=False)
    op.create_index(op.f('ix_static_orders_static_type'), 'static_orders', ['static_type'], unique=False)
    op.create_index(op.f('ix_static_orders_status'), 'static_orders', ['status'], unique=False)
    op.create_index(op.f('ix_static_orders_user_id'), 'static_orders', ['user_id'], unique=False)
    op.create_table('transactions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('transaction_no', sa.String(length=32), nullable=False, comment='交易编号'),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('agent_id', sa.Integer(), nullable=False),
    sa.Column('order_no', sa.String(length=32), nullable=False, comment='关联订单号'),
    sa.Column('amount', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='交易金额'),
    sa.Column('balance', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='交易后余额'),
    sa.Column('type', sa.String(length=20), nullable=False, comment='交易类型(recharge=充值,consume=消费,refund=退款)'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='交易状态(success=成功,failed=失败)'),
    sa.Column('remark', sa.Text(), nullable=True, comment='备注'),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_transactions_agent_id'), 'transactions', ['agent_id'], unique=False)
    op.create_index(op.f('ix_transactions_order_no'), 'transactions', ['order_no'], unique=False)
    op.create_index(op.f('ix_transactions_status'), 'transactions', ['status'], unique=False)
    op.create_index(op.f('ix_transactions_transaction_no'), 'transactions', ['transaction_no'], unique=True)
    op.create_index(op.f('ix_transactions_type'), 'transactions', ['type'], unique=False)
    op.create_index(op.f('ix_transactions_user_id'), 'transactions', ['user_id'], unique=False)
    op.create_table('user_prices',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('agent_id', sa.Integer(), nullable=True),
    sa.Column('price', sa.DECIMAL(precision=10, scale=4), nullable=False),
    sa.Column('ip_whitelist', sa.Text(), nullable=True, comment='IP白名单列表'),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.CheckConstraint('price >= 0', name='chk_user_price_positive'),
    sa.ForeignKeyConstraint(['agent_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product_inventory.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'product_id', name='uix_user_product')
    )
    op.create_index(op.f('ix_user_prices_agent_id'), 'user_prices', ['agent_id'], unique=False)
    op.create_index(op.f('ix_user_prices_product_id'), 'user_prices', ['product_id'], unique=False)
    op.create_index(op.f('ix_user_prices_user_id'), 'user_prices', ['user_id'], unique=False)
    op.create_table('instances',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('instance_no', sa.String(length=32), nullable=False, comment='实例编号'),
    sa.Column('order_no', sa.String(length=32), nullable=False, comment='关联订单号'),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('proxy_ip', sa.String(length=15), nullable=False, comment='代理IP'),
    sa.Column('proxy_port', sa.Integer(), nullable=False, comment='代理端口'),
    sa.Column('username', sa.String(length=50), nullable=False, comment='用户名'),
    sa.Column('password', sa.String(length=50), nullable=False, comment='密码'),
    sa.Column('expire_time', sa.TIMESTAMP(), nullable=False, comment='到期时间'),
    sa.Column('status', sa.SmallInteger(), nullable=False, comment='状态(1=正常,0=停用)'),
    sa.Column('ip_whitelist', sa.Text(), nullable=True, comment='IP白名单列表'),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['order_no'], ['static_orders.order_no'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_instances_instance_no'), 'instances', ['instance_no'], unique=True)
    op.create_index(op.f('ix_instances_order_no'), 'instances', ['order_no'], unique=False)
    op.create_index(op.f('ix_instances_user_id'), 'instances', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_instances_user_id'), table_name='instances')
    op.drop_index(op.f('ix_instances_order_no'), table_name='instances')
    op.drop_index(op.f('ix_instances_instance_no'), table_name='instances')
    op.drop_table('instances')
    op.drop_index(op.f('ix_user_prices_user_id'), table_name='user_prices')
    op.drop_index(op.f('ix_user_prices_product_id'), table_name='user_prices')
    op.drop_index(op.f('ix_user_prices_agent_id'), table_name='user_prices')
    op.drop_table('user_prices')
    op.drop_index(op.f('ix_transactions_user_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_type'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_transaction_no'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_status'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_order_no'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_agent_id'), table_name='transactions')
    op.drop_table('transactions')
    op.drop_index(op.f('ix_static_orders_user_id'), table_name='static_orders')
    op.drop_index(op.f('ix_static_orders_status'), table_name='static_orders')
    op.drop_index(op.f('ix_static_orders_static_type'), table_name='static_orders')
    op.drop_index(op.f('ix_static_orders_region_code'), table_name='static_orders')
    op.drop_index(op.f('ix_static_orders_proxy_type'), table_name='static_orders')
    op.drop_index(op.f('ix_static_orders_product_no'), table_name='static_orders')
    op.drop_index(op.f('ix_static_orders_order_no'), table_name='static_orders')
    op.drop_index(op.f('ix_static_orders_country_code'), table_name='static_orders')
    op.drop_index(op.f('ix_static_orders_city_code'), table_name='static_orders')
    op.drop_index(op.f('ix_static_orders_app_order_no'), table_name='static_orders')
    op.drop_index(op.f('ix_static_orders_agent_id'), table_name='static_orders')
    op.drop_table('static_orders')
    op.drop_table('resource_usage_statistics')
    op.drop_table('resource_usage_history')
    op.drop_index(op.f('ix_flow_usage_user_id'), table_name='flow_usage')
    op.drop_index(op.f('ix_flow_usage_instance_no'), table_name='flow_usage')
    op.drop_table('flow_usage')
    op.drop_index(op.f('ix_dynamic_orders_order_no'), table_name='dynamic_orders')
    op.drop_index(op.f('ix_dynamic_orders_id'), table_name='dynamic_orders')
    op.drop_index(op.f('ix_dynamic_orders_app_order_no'), table_name='dynamic_orders')
    op.drop_table('dynamic_orders')
    op.drop_index(op.f('ix_agent_statistics_id'), table_name='agent_statistics')
    op.drop_table('agent_statistics')
    op.drop_index(op.f('ix_agent_prices_product_id'), table_name='agent_prices')
    op.drop_index(op.f('ix_agent_prices_agent_id'), table_name='agent_prices')
    op.drop_table('agent_prices')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_app_username'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_resource_usage_id'), table_name='resource_usage')
    op.drop_table('resource_usage')
    op.drop_table('proxy_info')
    op.drop_index('ix_product_inventory_supplier_code', table_name='product_inventory')
    op.drop_index('ix_product_inventory_static_type', table_name='product_inventory')
    op.drop_index('ix_product_inventory_proxy_type', table_name='product_inventory')
    op.drop_index('ix_product_inventory_product_no', table_name='product_inventory')
    op.drop_index('ix_product_inventory_country_code', table_name='product_inventory')
    op.drop_index('ix_product_inventory_city_code', table_name='product_inventory')
    op.drop_index('ix_product_inventory_area_code', table_name='product_inventory')
    op.drop_table('product_inventory')
    # ### end Alembic commands ###
