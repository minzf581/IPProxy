# 使用 Python 3.9 作为基础镜像
FROM python:3.9-slim

# 设置工作目录
WORKDIR /app

# 设置 Python 环境变量
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PATH="/app/.local/bin:$PATH" \
    DATABASE_URL="postgresql://postgres:VklXzDrDMygoJNZjzzSlNLMjmqKIPaYQ@postgres.railway.internal:5432/railway"

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    gcc \
    python3-dev \
    libpq-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# 复制依赖文件
COPY backend/requirements.txt .

# 安装基础 Python 工具
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# 安装 Python 依赖
RUN pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir \
    uvicorn[standard] \
    gunicorn \
    fastapi \
    sqlalchemy \
    psycopg2-binary \
    alembic \
    python-dotenv \
    pydantic[email] \
    python-jose[cryptography] \
    passlib[bcrypt] \
    python-multipart \
    aiohttp \
    pandas \
    numpy

# 复制源代码
COPY backend .

# 显示目录结构和尝试导入
RUN echo "Current directory structure:" && \
    ls -la && \
    echo "\nPython path:" && \
    python -c "import sys; print('\n'.join(sys.path))" && \
    echo "\nTesting database connection:" && \
    python -c "from sqlalchemy import create_engine; engine = create_engine('${DATABASE_URL}'); conn = engine.connect(); conn.close()"

# 暴露端口
EXPOSE 8000

# 等待数据库并运行迁移
CMD echo "Waiting for database..." && \
    python -c "import time; from sqlalchemy import create_engine; \
    while True: \
        try: \
            engine = create_engine('${DATABASE_URL}'); \
            conn = engine.connect(); \
            conn.close(); \
            break; \
        except Exception as e: \
            print(f'Database not ready: {e}'); \
            time.sleep(2);" && \
    alembic upgrade head && \
    uvicorn app.main:app --host 0.0.0.0 --port 8000 