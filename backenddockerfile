# 使用 Python 3.9 作为基础镜像
FROM python:3.9-slim

# 设置工作目录
WORKDIR /app

# 设置 Python 环境变量
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PATH="/app/.local/bin:$PATH" \
    DATABASE_URL="postgresql://postgres:VklXzDrDMygoJNZjzzSlNLMjmqKIPaYQ@postgres.railway.internal:5432/railway"

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    gcc \
    python3-dev \
    libpq-dev \
    curl \
    procps \
    && rm -rf /var/lib/apt/lists/*

# 复制依赖文件
COPY backend/requirements.txt .

# 安装基础 Python 工具
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# 安装 Python 依赖
RUN pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir \
    uvicorn[standard] \
    gunicorn \
    fastapi \
    sqlalchemy \
    psycopg2-binary \
    alembic \
    python-dotenv \
    pydantic[email] \
    python-jose[cryptography] \
    passlib[bcrypt] \
    python-multipart \
    aiohttp \
    pandas \
    numpy

# 复制源代码
COPY backend .

# 显示目录结构
RUN echo "Current directory structure:" && \
    ls -la && \
    echo "\nPython path:" && \
    python -c "import sys; print('\n'.join(sys.path))"

# 创建 Gunicorn 配置文件
RUN echo 'import multiprocessing\n\
bind = "0.0.0.0:8000"\n\
workers = 1\n\
worker_class = "uvicorn.workers.UvicornWorker"\n\
timeout = 120\n\
keepalive = 75\n\
errorlog = "-"\n\
accesslog = "-"\n\
loglevel = "debug"\n\
forwarded_allow_ips = "*"\n\
proxy_allow_ips = "*"\n\
' > /app/gunicorn.conf.py

# 暴露端口
EXPOSE 8000

# 创建启动脚本
RUN echo '#!/bin/sh\n\
echo "=== Starting application setup ==="\n\
echo "Current working directory: $(pwd)"\n\
echo "Directory contents:"\n\
ls -la\n\
echo "Python version:"\n\
python --version\n\
echo "Installed Python packages:"\n\
pip list\n\
echo "Environment variables:"\n\
env | grep -v "DATABASE_URL"\n\
echo "Starting container with DATABASE_URL=<hidden>"\n\
echo "\n=== Checking database connection ==="\n\
python -c "\
import time\n\
import sys\n\
import os\n\
from sqlalchemy import create_engine\n\
from sqlalchemy.exc import OperationalError\n\
print(f\"Attempting to connect to database...\")\n\
retries = 0\n\
while True:\n\
    try:\n\
        engine = create_engine(os.environ[\"DATABASE_URL\"])\n\
        print(\"Created database engine, attempting connection...\")\n\
        conn = engine.connect()\n\
        print(\"Successfully connected to database\")\n\
        conn.close()\n\
        break\n\
    except OperationalError as e:\n\
        retries += 1\n\
        print(f\"Database connection attempt {retries} failed: {e}\")\n\
        if retries >= 30:  # 1分钟后超时\n\
            print(\"Database connection timeout after 30 attempts\")\n\
            sys.exit(1)\n\
        time.sleep(2)\n\
    except Exception as e:\n\
        print(f\"Unexpected error during database connection: {e}\")\n\
        sys.exit(1)\n\
"\n\
echo "\n=== Running database migrations ==="\n\
alembic upgrade head\n\
echo "\n=== Starting FastAPI application ==="\n\
echo "Starting uvicorn with host=0.0.0.0 port=8000"\n\
\n\
# 创建一个简单的健康检查服务器
python -c "\
import http.server\n\
import socketserver\n\
import json\n\
import threading\n\
import time\n\
import requests\n\
import logging\n\
\n\
logging.basicConfig(level=logging.DEBUG)\n\
logger = logging.getLogger(\"healthcheck\")\n\
\n\
def check_main_app():\n\
    try:\n\
        response = requests.get(\"http://localhost:8000\")\n\
        logger.info(f\"Main app response status: {response.status_code}\")\n\
        logger.info(f\"Main app response body: {response.text}\")\n\
        return response.status_code == 200\n\
    except Exception as e:\n\
        logger.error(f\"Error checking main app: {str(e)}\")\n\
        return False\n\
\n\
class HealthCheckHandler(http.server.SimpleHTTPRequestHandler):\n\
    def do_GET(self):\n\
        logger.info(f\"Received health check request: {self.path}\")\n\
        if self.path == \"/\":\n\
            try:\n\
                is_healthy = check_main_app()\n\
                status = 200 if is_healthy else 503\n\
                response = {\n\
                    \"status\": \"healthy\" if is_healthy else \"unhealthy\",\n\
                    \"message\": \"Service is running\" if is_healthy else \"Service is not ready\",\n\
                    \"timestamp\": time.strftime(\"%Y-%m-%d %H:%M:%S\")\n\
                }\n\
                logger.info(f\"Sending response: {response}\")\n\
                self.send_response(status)\n\
                self.send_header(\"Content-type\", \"application/json\")\n\
                self.end_headers()\n\
                self.wfile.write(json.dumps(response).encode())\n\
            except Exception as e:\n\
                logger.error(f\"Error in health check: {str(e)}\")\n\
                self.send_error(500, str(e))\n\
        else:\n\
            self.send_error(404)\n\
\n\
def run_health_check_server():\n\
    try:\n\
        with socketserver.TCPServer((\"\", 8001), HealthCheckHandler) as httpd:\n\
            logger.info(\"Health check server started on port 8001\")\n\
            httpd.serve_forever()\n\
    except Exception as e:\n\
        logger.error(f\"Error starting health check server: {str(e)}\")\n\
\n\
# 在后台启动健康检查服务器\n\
health_thread = threading.Thread(target=run_health_check_server)\n\
health_thread.daemon = True\n\
health_thread.start()\n\
" &\n\
\n\
# 启动主应用\n\
exec gunicorn -c /app/gunicorn.conf.py app.main:app\n\
' > /app/start.sh && chmod +x /app/start.sh

# 启动命令
CMD ["/app/start.sh"] 